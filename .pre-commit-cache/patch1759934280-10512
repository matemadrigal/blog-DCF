diff --git a/.gitignore b/.gitignore
index a798c0b..f1cbc01 100644
--- a/.gitignore
+++ b/.gitignore
@@ -38,3 +38,6 @@ reports_output/
 
 # Streamlit
 .streamlit/secrets.toml
+
+# Environment variables
+.env
diff --git a/README.md b/README.md
index 4143f9a..de33059 100644
--- a/README.md
+++ b/README.md
@@ -10,7 +10,9 @@ Plataforma profesional de valoraci√≥n de empresas mediante **Discounted Cash Flo
 ## üöÄ Caracter√≠sticas
 
 ### üìà An√°lisis Individual
-- C√°lculo DCF con inputs manuales o autocompletado desde Yahoo Finance
+- C√°lculo DCF con inputs manuales o **b√∫squeda inteligente multi-fuente**
+- **3 modos de datos**: Manual, Autocompletar (Yahoo), Multi-fuente (varios APIs)
+- **Estrategias de b√∫squeda**: Mejor calidad, Primera disponible, Combinar fuentes
 - M√©tricas clave: Enterprise Value, Fair Value por acci√≥n, Upside/Downside
 - Desglose detallado de flujos de caja proyectados
 - Gr√°ficos interactivos con Plotly
@@ -69,6 +71,26 @@ pip install --upgrade pip setuptools wheel
 pip install -r requirements.txt
 ```
 
+### 4. Configurar APIs (Opcional pero recomendado)
+
+Para usar el modo **Multi-fuente** con mejor calidad de datos:
+
+```bash
+# Opci√≥n A: Variables de entorno
+cp .env.example .env
+# Edita .env y agrega tus API keys
+
+# Opci√≥n B: Streamlit secrets
+cp .streamlit/secrets.toml.example .streamlit/secrets.toml
+# Edita secrets.toml y agrega tus API keys
+```
+
+**Obtener API keys gratuitas:**
+- **Alpha Vantage**: https://www.alphavantage.co/support/#api-key (25 req/d√≠a)
+- **Financial Modeling Prep**: https://site.financialmodelingprep.com/developer/docs (250 req/d√≠a)
+
+üìö Ver gu√≠a completa: [docs/MULTI_SOURCE_DATA.md](docs/MULTI_SOURCE_DATA.md)
+
 ## üöÄ Ejecuci√≥n
 
 ### M√©todo 1: Comando directo
@@ -91,12 +113,14 @@ La aplicaci√≥n se abrir√° en `http://localhost:8501`
 
 1. Ingresa un ticker (ej: AAPL, GOOGL, MSFT)
 2. Configura par√°metros DCF:
-   - **Modo**: Manual o Autocompletar (desde Yahoo Finance)
+   - **Modo**: Manual, Autocompletar (Yahoo Finance), o **Multi-fuente** (b√∫squeda inteligente)
+   - **Estrategia** (si usas Multi-fuente): Mejor calidad, Primera disponible, o Combinar fuentes
    - **Tasa de descuento (r)**: T√≠picamente 8-15%
    - **Crecimiento terminal (g)**: T√≠picamente 2-3%
    - **Shares outstanding**: Dejar en 0 para autocompletar
 3. Revisa los resultados:
    - Fair Value calculado
+   - **M√©tricas de calidad** (fuente, completitud, confianza)
    - Comparaci√≥n con precio de mercado
    - Upside/Downside potencial
 4. Exporta:
@@ -134,6 +158,12 @@ blog-DCF/
 ‚îÇ   ‚îú‚îÄ‚îÄ dcf/
 ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ model.py               # Modelo DCF core
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ fundamentals.py        # Normalizaci√≥n de datos
+‚îÇ   ‚îú‚îÄ‚îÄ data_providers/            # üÜï Sistema multi-fuente
+‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ base.py                # Clases base y FinancialData
+‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ yahoo_provider.py      # Yahoo Finance provider
+‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ alpha_vantage_provider.py  # Alpha Vantage provider
+‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fmp_provider.py        # Financial Modeling Prep provider
+‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ aggregator.py          # B√∫squeda inteligente multi-fuente
 ‚îÇ   ‚îú‚îÄ‚îÄ cache/
 ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ db.py                  # Sistema de cach√© SQLite
 ‚îÇ   ‚îî‚îÄ‚îÄ reports/
@@ -149,10 +179,13 @@ blog-DCF/
 
 - **Streamlit**: Framework web interactivo
 - **yfinance**: Datos financieros de Yahoo Finance
+- **Alpha Vantage API**: Datos fundamentales de alta calidad
+- **Financial Modeling Prep API**: Estados financieros detallados
 - **Plotly**: Gr√°ficos interactivos profesionales
 - **SQLite**: Base de datos persistente local
 - **ReportLab**: Generaci√≥n de informes PDF
 - **Pandas/NumPy**: Procesamiento de datos
+- **Requests**: Cliente HTTP para APIs REST
 
 ## üéØ Metodolog√≠a DCF
 
@@ -199,7 +232,8 @@ pip install reportlab
 
 ## üîÆ Pr√≥ximas Mejoras
 
-- [ ] M√∫ltiples fuentes de datos (Alpha Vantage, Financial Modeling Prep)
+- [x] ‚úÖ M√∫ltiples fuentes de datos (Alpha Vantage, Financial Modeling Prep)
+- [x] ‚úÖ B√∫squeda inteligente con estrategias (mejor calidad, merge, fallback)
 - [ ] C√°lculo autom√°tico de WACC
 - [ ] Proyecciones inteligentes basadas en hist√≥rico
 - [ ] An√°lisis de sensibilidad (heat maps r vs g)
diff --git "a/pages/1_\360\237\223\210_An\303\241lisis_Individual.py" "b/pages/1_\360\237\223\210_An\303\241lisis_Individual.py"
index e3b7c80..8a9c89c 100644
--- "a/pages/1_\360\237\223\210_An\303\241lisis_Individual.py"
+++ "b/pages/1_\360\237\223\210_An\303\241lisis_Individual.py"
@@ -8,6 +8,7 @@ from datetime import date, timedelta, datetime
 
 from src.dcf.model import dcf_value
 from src.cache import DCFCache
+from src.data_providers.aggregator import get_data_aggregator
 
 
 st.set_page_config(
@@ -20,13 +21,14 @@ st.markdown(
 )
 
 
-# Initialize cache
+# Initialize cache and data aggregator
 @st.cache_resource
 def get_cache():
     return DCFCache()
 
 
 cache = get_cache()
+aggregator = get_data_aggregator()
 
 
 # Sidebar inputs
@@ -34,7 +36,26 @@ st.sidebar.header("Par√°metros")
 ticker = st.sidebar.text_input("Ticker (Yahoo Finance)", value="AAPL").upper()
 
 st.sidebar.subheader("Par√°metros DCF")
-mode = st.sidebar.radio("Modo FCF", ["Manual", "Autocompletar"], index=0)
+
+# Data source selection
+available_providers = aggregator.get_available_providers()
+if len(available_providers) > 1:
+    st.sidebar.info(f"üì° Fuentes disponibles: {', '.join(available_providers)}")
+    data_strategy = st.sidebar.selectbox(
+        "Estrategia de datos",
+        ["best_quality", "first_available", "merge"],
+        format_func=lambda x: {
+            "best_quality": "Mejor Calidad",
+            "first_available": "Primera Disponible",
+            "merge": "Combinar Fuentes",
+        }[x],
+        help="best_quality: Compara todas las fuentes y elige la mejor\nfirst_available: Usa la primera que funcione\nmerge: Combina datos de m√∫ltiples fuentes",
+    )
+else:
+    data_strategy = "first_available"
+    st.sidebar.info(f"üì° Usando: {available_providers[0] if available_providers else 'Yahoo Finance'}")
+
+mode = st.sidebar.radio("Modo FCF", ["Manual", "Autocompletar", "Multi-fuente"], index=0)
 years = st.sidebar.number_input(
     "A√±os de proyecci√≥n", min_value=1, max_value=20, value=5
 )
@@ -116,24 +137,68 @@ st.subheader("üìä Proyecciones de Free Cash Flow")
 
 # Autofill logic
 autofill = []
-if mode == "Autocompletar":
+data_source_used = None
+
+if mode == "Multi-fuente":
+    # Use multi-source aggregator
+    with st.spinner("üîç Buscando datos en m√∫ltiples fuentes..."):
+        financial_data = aggregator.get_financial_data(ticker, years, strategy=data_strategy)
+        if financial_data:
+            # Calculate or get FCF
+            fcf_data = financial_data.calculate_fcf()
+            if fcf_data:
+                autofill = fcf_data
+                data_source_used = financial_data.data_source
+
+                # Update company info if available
+                if financial_data.company_name:
+                    company_name = financial_data.company_name
+                if financial_data.current_price:
+                    current_price = financial_data.current_price
+                if financial_data.shares_outstanding and shares == 0:
+                    shares = financial_data.shares_outstanding
+
+                # Show data quality metrics
+                st.info(
+                    f"üìä **Fuente**: {financial_data.data_source} | "
+                    f"**Completitud**: {financial_data.data_completeness:.1f}% | "
+                    f"**Confianza**: {financial_data.confidence_score:.1f}%"
+                )
+            else:
+                st.warning("‚ö†Ô∏è No se pudieron calcular FCF desde multi-fuentes. Usando Yahoo Finance...")
+
+elif mode == "Autocompletar":
+    # Original Yahoo Finance only
     try:
-        t = yf.Ticker(ticker)
-        cashflow = t.cashflow
-        if not cashflow.empty:
-            cols = list(cashflow.columns)[:years]
-            for c in cols:
-                op = None
-                capex = None
-                for idx in cashflow.index:
-                    name = str(idx).lower()
-                    if "operat" in name and op is None:
-                        op = cashflow.loc[idx, c]
-                    if "capital" in name and capex is None:
-                        capex = cashflow.loc[idx, c]
-                if op is not None and capex is not None:
-                    autofill.append(float(op - capex))
-    except Exception:
+        with st.spinner("üîç Obteniendo datos desde Yahoo Finance..."):
+            t = yf.Ticker(ticker)
+            cashflow = t.cashflow
+            if not cashflow.empty:
+                cols = list(cashflow.columns)[:years]
+                for c in cols:
+                    op = None
+                    capex = None
+                    for idx in cashflow.index:
+                        name = str(idx).lower()
+                        # Look for Operating Cash Flow
+                        if "operating cash flow" in name and op is None:
+                            op = cashflow.loc[idx, c]
+                        # Look for Capital Expenditure (not stock repurchase!)
+                        if ("capital expenditure" in name or "purchase of ppe" in name) and capex is None:
+                            capex = cashflow.loc[idx, c]
+                    if op is not None and capex is not None:
+                        # CAPEX is usually negative in Yahoo Finance, so we use abs
+                        autofill.append(float(op - abs(capex)))
+                data_source_used = "Yahoo Finance"
+
+                if autofill:
+                    st.success(f"‚úÖ Autocompletado {len(autofill)} a√±os de FCF desde Yahoo Finance")
+                else:
+                    st.warning("‚ö†Ô∏è No se encontraron datos de Operating Cash Flow y CAPEX")
+            else:
+                st.warning(f"‚ö†Ô∏è No se encontraron datos de cash flow para {ticker}")
+    except Exception as e:
+        st.error(f"‚ùå Error al obtener datos: {str(e)}")
         autofill = []
 
 fcf_cols = st.columns(years)
